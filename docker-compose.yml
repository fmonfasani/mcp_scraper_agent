version: '3.8'

services:
  scraping-agent:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    image: scraping-mcp-agent:latest
    container_name: scraping-mcp-agent
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - ENABLE_LOGGING=true
      - ENABLE_METRICS=true
      - MAX_CONCURRENT_REQUESTS=5
      - MAX_REQUESTS_PER_MINUTE=30
      - MAX_REQUESTS_PER_HOUR=500
      - SCRAPING_TIMEOUT=30000
      - ENABLE_STEALTH=true
      - ENABLE_USER_AGENT_ROTATION=true
      - HUMAN_LIKE_DELAY=true
      - ENABLE_DATA_CLEANING=true
      - ENABLE_RATE_LIMIT=true
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Volumes for persistent data
    volumes:
      - ./logs:/app/logs
      - ./exports:/app/exports
      - ./cache:/app/cache
      - ./config/local.json:/app/config/local.json:ro
    
    # Network configuration
    networks:
      - scraping-network
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # User configuration
    user: "1000:1000"
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for caching and job queuing
  redis:
    image: redis:7-alpine
    container_name: scraping-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis-data:/data
    
    networks:
      - scraping-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Monitoring with Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: scraping-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    ports:
      - "9090:9090"
    
    networks:
      - scraping-network
    
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: scraping-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    ports:
      - "3001:3000"
    
    networks:
      - scraping-network
    
    profiles:
      - monitoring
    
    depends_on:
      - prometheus

# Networks
networks:
  scraping-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Development override
---
# docker-compose.override.yml for development
version: '3.8'

services:
  scraping-agent:
    build:
      target: builder  # Use builder stage for development
    
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - ENABLE_LOGGING=true
      - MAX_CONCURRENT_REQUESTS=3
      - SCRAPING_TIMEOUT=15000
    
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    
    command: ["npm", "run", "dev"]
    
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    
    profiles:
      - dev